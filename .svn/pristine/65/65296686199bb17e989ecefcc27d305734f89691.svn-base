#include "input_handler.h"

#include <errno.h>
#include <inttypes.h>
#include <pthread.h>

#include <sys/types.h> 
#include <sys/socket.h>

#include <netinet/in.h>

#include "server.h"
#include "work_handler.h"

#define DIFFICULTY_LEN 8
#define SEED_LEN 64
#define NONCE_LEN 16
#define WORK_LEN 98
#define THREAD_LEN 2

void print_soln(char *buffer, int sd); 
void print_work(char *buffer, int sd);

Queue *working_queue;

void init_input_handler(Queue *queue) {
    working_queue = queue;
}

void input_handler(char* buffer, int sd) {
    
    if(strncmp(buffer, PING, 4) == 0) {
        //fprintf(stdout, "PING received");
        my_send(PONG, sd);
    }
    else if(strncmp(buffer, PONG, 4) == 0) {
        reply_to_pong(sd); 
    }
    else if(strncmp(buffer, ERRO, 4) == 0) {
        reply_to_erro(sd); 
    }
    else if(strncmp(buffer, OKAY, 4) == 0) {
        reply_to_okay(sd); 
    }
    else if(strncmp(buffer, SOLN, 4) == 0) {
        //print_soln(buffer, sd); 
        reply_to_soln(buffer, sd);
    }
    else if(strncmp(buffer, WORK, 4) == 0) {
        //print_work(buffer, sd); 
        add_to_work_queue(buffer, sd); 
    }
    else if(strncmp(buffer, ABRT, 4) == 0) {
        client_abort(sd); 
    }
    else {
        reply_to_gibberish(sd); 
    }
}

void reply_to_pong(int sd) {
    char *suffix = " PONG message reserved for the server only";
    char *error_message = form_error(suffix);
    my_send(error_message, sd); 
}

void print_soln(char *buffer, int sd) {
     fprintf(stdout, "-----------------------------\n"); 
     fprintf(stdout, "Buffer for soln is: %s\n", buffer); 
     fprintf(stdout, "-----------------------------\n"); 
     fflush(stdout);

     my_send("OKAY", sd); 
}

void print_work(char *buffer, int sd) {
     fprintf(stdout, "-----------------------------\n"); 
     fprintf(stdout, "Buffer for soln is: %s\n", buffer); 
     fprintf(stdout, "-----------------------------\n"); 
     fflush(stdout);

     my_send("IMCDCDDD", sd); 
}

void reply_to_soln(char* buffer, int sd) {
     if(strlen(buffer) < SOLN_LEN) {
        char *error = form_error(" the SOLN input was malformed"); 
        my_send(error, sd); 
        return;
     }
     strtok(buffer, " "); 
     fprintf(stdout, "-----------------------------\n"); 
     fprintf(stdout, "Buffer for soln is: %s\n", buffer);
     fflush(stdout);
     SOLN_ARGS args;
     uint256_init(args.seed); 
     char temp[SEED_LEN + 1];
     memset(temp, 0, SEED_LEN + 1); 
     strcpy(temp, strtok(NULL, " "));
     if(strlen(temp) != DIFFICULTY_LEN) {
         char *suffix = " Malformed difficulty in solution message";
         char *error = form_error(suffix);
         my_send(error, sd); 
         return;
     }
     args.difficulty = strtol(temp, NULL, 16);
     fprintf(stdout, "Difficulty: %d\n", args.difficulty); 
     memset(temp, 0, SEED_LEN + 1);
     strcpy(temp, strtok(NULL, " "));
     if(strlen(temp) != SEED_LEN) {
         char *suffix = " Malformed seed in solution message";
         char *error = form_error(suffix);
         my_send(error, sd);
         return;
     }
     fflush(stdout); 
     for(int i = SEED_LEN/2 - 1; i >= 0; i--) {
         char one_byte[3];
         strncpy(one_byte, temp + 2*i, 2); 
         one_byte[2] = '\0';
         args.seed[i] = strtol(one_byte, NULL, 16); 
     }
     fprintf(stdout, "Seed is: ");
     print_uint256(args.seed);
     //fprintf(stdout, "\n");
     fflush(stdout);
     memset(temp, 0, SEED_LEN + 1);
     strcpy(temp, strtok(NULL, CRLF));  
     if(strlen(temp) != NONCE_LEN) {
         char *suffix = " Malformed nonce in solution message";
         char *error = form_error(suffix);
         my_send(error, sd); 
         return;
     }
     args.nonce = strtoull(temp, NULL, 16);
     fprintf(stdout, "Nonce is %llu\n", args.nonce); 
     fflush(stdout); 

     if(check_solution(args)) {
         my_send(OKAY, sd);
     }
     else {
         char *error = form_error(" Given solution is invalid");
         my_send(error, sd); 
     }
     fprintf(stdout, "-----------------------------\n"); 
     fflush(stdout);
}

void add_to_work_queue(char *buffer, int sd) {
     if(strlen(buffer) < WORK_LEN) {
        char *error = form_error(" the WORK input was malformed"); 
        my_send(error, sd); 
        return;
     }
     fprintf(stdout, "-----------------------------\n"); 
     fprintf(stdout, "Buffer for work is: %s\n", buffer);
     strtok(buffer, " "); 
     fflush(stdout);
     Work *args = malloc(sizeof *args);
     args->sd = sd;
     BYTE seed[32]; 
     uint256_init(seed); 
     int32 difficulty;
     char temp[SEED_LEN + 1];
     memset(temp, 0, SEED_LEN + 1); 
     strcpy(temp, strtok(NULL, " "));
     if(strlen(temp) != DIFFICULTY_LEN) {
         char *suffix = " Malformed difficulty in work message";
         char *error = form_error(suffix);
         my_send(error, sd); 
         return;
     }
     difficulty = strtol(temp, NULL, 16);
     fprintf(stdout, "Difficulty: %d\n", difficulty); 
     args->difficulty = difficulty; 
     memset(temp, 0, SEED_LEN + 1);
     strcpy(temp, strtok(NULL, " "));
     if(strlen(temp) != SEED_LEN) {
         char *suffix = " Malformed seed in work message";
         char *error = form_error(suffix);
         my_send(error, sd);
         return;
     }
     fflush(stdout); 
     for(int i = SEED_LEN/2 - 1; i >= 0; i--) {
         char one_byte[3];
         strncpy(one_byte, temp + 2*i, 2); 
         one_byte[2] = '\0';
         seed[i] = strtol(one_byte, NULL, 16); 
     }
     fprintf(stdout, "Seed is: ");
     print_uint256(seed);
     //fprintf(stdout, "\n");
     fflush(stdout);
     memset(temp, 0, SEED_LEN + 1);
     strcpy(temp, strtok(NULL, " "));  
     if(strlen(temp) != NONCE_LEN) {
         char *suffix = " Malformed nonce in seed message";
         char *error = form_error(suffix);
         my_send(error, sd);
         return;
     }
     fprintf(stdout, "Nonce string is: %s\n", temp); 
     args->nonce = strtoull(temp, NULL, 16);
     fprintf(stdout, "Nonce is %llu\n", args->nonce); 
     fflush(stdout); 
     memset(temp, 0, SEED_LEN + 1);
     strcpy(temp, strtok(NULL, CRLF));
     if(strlen(temp) != THREAD_LEN) { 
         char *suffix = " Malformed thread count in seed message";
         char *error = form_error(suffix);
         my_send(error, sd); 
         return;
     }
     args->worker_count = strtol(temp, NULL, 16);
     fprintf(stdout, "Thread count is %d\n", args->worker_count); 
     fflush(stdout);
     //my_send("Pop", sd);

     for(int i = 0; i < BYTE_LENGTH; i++) {
         args->x[i] = seed[i];
     }
     int64 nonce_copy = args->nonce; 
     for(int i = TOTAL_SIZE - 1; i >= BYTE_LENGTH; i--) {
         args->x[i] = nonce_copy & 0xFF;
         nonce_copy = nonce_copy >> 8;
     }

     int32 alpha;
     BYTE beta[BYTE_LENGTH];
     uint256_init(beta);
     alpha = ((((1 << 8) - 1) << 24) & difficulty) >> 24;
     int32 beta_num = ((1 << 24) - 1) & difficulty; 
     fprintf(stdout, "Number beta is: %d\n", beta_num); 
     for(int i = BYTE_LENGTH - 1; i >= 0; i--) {
         beta[i] = beta_num & 0xFF;
         beta_num = beta_num >> 8;
     }
     fprintf(stdout, "Alpha is: %d\n", alpha); 
     fprintf(stdout, "Beta is:");
     print_uint256(beta);
     fprintf(stdout, "\n");
     /* Need to find the exponent using alpha and beta */
     //BYTE target[BYTE_LENGTH];
     uint256_init(args->target); 
     int32 exponent = 8 * (alpha - 3);
     BYTE exponent_num[32];
     uint256_init(exponent_num);
	 BYTE base[32];
	 uint256_init(base);
	 base[31] = 2;
	 uint256_exp(exponent_num, base, exponent);
     uint256_mul(args->target, beta, exponent_num);
     fprintf(stdout, "Target: ");
     print_uint256(args->target); 
     fprintf(stdout, "-----------------------------\n"); 
     fflush(stdout);
     //my_send("IMDVMFDKO MSK", sd);
     /* Mutex lock inserted inside queue */
     queue_enqueue(working_queue, args);
}

void reply_to_erro(int sd) {
    char *suffix = " ERRO messages can only be sent by the server";
    char *error_message = form_error(suffix); 
    my_send(error_message, sd); 
}

void client_abort(int sd) {
    sweep_and_remove(sd); 
    my_send(OKAY, sd); 
}

void sweep_and_remove(int sd) {
    int count = 0; 
    if(working_queue->items->head == NULL) {
        return;
    }
    Node *node = working_queue->items->head->next; 
    while(node != NULL) {
        Work *work = (Work *)node->data;
        if(work->sd == sd) {
            queue_remove_from_middle(working_queue, node);
            fprintf(stdout, "Items removed %d\n", ++count);
        }
        node = node->next; 
    }
    Work *work = (Work *)working_queue->items->head->data;
    if(work->sd == sd) {
        set_abort_flag_true();
    }
    return;
}

void reply_to_okay(int sd) {
    char *suffix = " OKAY messages can only be sent by the server";
    char *error_message = form_error(suffix); 
    my_send(error_message, sd); 
}

void reply_to_gibberish(int sd) {
    char *suffix = " Sent message not part of the protocol";
    char *error_message = form_error(suffix); 
    my_send(error_message, sd); 
}

char *form_error(char *suffix) {
    // + 1 for space
    char *error = malloc(sizeof(char) * (HEADER_LENGTH + strlen(suffix) + 1));
    memset(error, 0, HEADER_LENGTH + strlen(suffix + 1)); 
    strcpy(error, ERRO); 
    strcat(error, suffix);
    //strcat(error, CRLF); 
    error[strlen(error)] = '\0'; 
    return error;
}

void my_send(char message[MAX_MESSAGE_LEN], int sd) {
    // Protocol messages sent need to be formatted according to SSTP.
    char protocol_message[MAX_MESSAGE_LEN + HEADER_LENGTH + 1];
    memset(protocol_message, 0, MAX_MESSAGE_LEN + HEADER_LENGTH + 1);
    strcat(protocol_message, (char*)message);
    strcat(protocol_message, CRLF);
    protocol_message[strlen(protocol_message)] = '\0';
    unsigned int n = send(sd, (BYTE *)protocol_message, strlen(protocol_message), 0); 
    if (n !=  strlen(protocol_message)) {
		perror("ERROR while writing to socket");
	}
    else {
        // Log here.
    }
    return;
}

